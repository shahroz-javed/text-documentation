//interacting with different stores
$value = Cache::store('file')->get('foo');
Cache::store('redis')->put('bar', 'baz', 600); // 10 Minutes


//retrieve cache value
$value = Cache::get('key');  	//retrive cache
$value = Cache::get('key', 'default');
$value = Cache::get('key', function () {
    return DB::table(/* ... */)->get();
});



//checking existence
Cache::has('key')



//increment descrement values [integer]
Cache::increment('key');
Cache::increment('key', $amount);
Cache::decrement('key');
Cache::decrement('key', $amount);




//retrieve and store
$value = Cache::remember('users', $seconds, function () {
    return DB::table('users')->get();
});
$value = Cache::rememberForever('users', function () {
    return DB::table('users')->get();
});





//retrieve and delete
$value = Cache::pull('key');
Cache::forget('key');
Cache::put('key', 'value', 0);
Cache::put('key', 'value', -5);
Cache::flush();


//store
Cache::put('key', 'value', $seconds = 10);
Cache::put('key', 'value');
Cache::put('key', 'value', now()->addMinutes(10));


//store only if not exist
Cache::add('key', 'value', $seconds);



//store forever
Cache::forever('key', 'value');






//cache helper
$value = cache('key');
cache(['key' => 'value'], $seconds);
cache(['key' => 'value'], now()->addMinutes(10));
cache()->remember('users', $seconds, function () {
    return DB::table('users')->get();
});






//cache lock
Schema::create('cache_locks', function ($table) {
    $table->string('key')->primary();
    $table->string('owner');
    $table->integer('expiration');
});


$lock = Cache::lock('foo', 10);
 if ($lock->get()) {
    // Lock acquired for 10 seconds...
 
    $lock->release();
}
Cache::lock('foo', 10)->block(5, function () {
    // Lock acquired after waiting a maximum of 5 seconds...
});
optional($lock)->release();
Cache::lock('processing')->forceRelease();
