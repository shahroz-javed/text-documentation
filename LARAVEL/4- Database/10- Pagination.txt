DB::table('users')->paginate(2);
DB::table('users')->simplePaginate(15);		//only prev and next buttons




//multiple paginator on single page
User::where('id', '>=', 1)->paginate(
            $perPage = 5,
            $columns = ['*'],
            $pageName = 'users'
        );


//cursor pagination
DB::table('users')->orderBy('id')->cursorPaginate(15);

1- use where instead of "offset" clause
2- most efficient
3- well-suited for large data-sets and "infinite" scrolling user interfaces
4- "cursor" string in the query string.
5- cursor is an encoded string containing the location that the next paginated query should 
	start paginating and the direction that it should paginate




//customizing urls
$users->withPath('/admin/users');



//appending query string values
$user->appends(['sort' => 'value']);
User::paginate(15)->withQueryString();





//Appending Hash Fragments
User::paginate(15)->fragment('users');





//Converting Results To JSON
User::paginate();





//Displaying Pagination Results
{{ $users->links() }}
{{ $users->onEachSide(5)->links() }}



//Customizing The Pagination View
{{ $paginator->links('view.name') }}
{{ $paginator->links('view.name', ['foo' => 'bar']) }}		//pasing additinal data to view
php artisan vendor:publish --tag=laravel-pagination		//publish pagination views

//in app service provider boot
Paginator::defaultView('view-name');
Paginator::defaultSimpleView('view-name');
Paginator::useBootstrapFive();		//using bootstrap
Paginator::useBootstrapFour();



//vars
$paginator
$elements


//methods paginate
$paginator->count()	Get the number of items for the current page.
$paginator->currentPage()	Get the current page number.
$paginator->firstItem()	Get the result number of the first item in the results.
$paginator->getOptions()	Get the paginator options.
$paginator->getUrlRange($start, $end)	Create a range of pagination URLs.
$paginator->hasPages()	Determine if there are enough items to split into multiple pages.
$paginator->hasMorePages()	Determine if there are more items in the data store.
$paginator->items()	Get the items for the current page.
$paginator->lastItem()	Get the result number of the last item in the results.
$paginator->lastPage()	Get the page number of the last available page. (Not available when using simplePaginate).
$paginator->nextPageUrl()	Get the URL for the next page.
$paginator->onFirstPage()	Determine if the paginator is on the first page.
$paginator->perPage()	The number of items to be shown per page.
$paginator->previousPageUrl()	Get the URL for the previous page.
$paginator->total()	Determine the total number of matching items in the data store. (Not available when using simplePaginate).
$paginator->url($page)	Get the URL for a given page number.
$paginator->getPageName()	Get the query string variable used to store the page.
$paginator->setPageName($name)	Set the query string variable used to store the page.


//methods cursor
$paginator->count()	Get the number of items for the current page.
$paginator->cursor()	Get the current cursor instance.
$paginator->getOptions()	Get the paginator options.
$paginator->hasPages()	Determine if there are enough items to split into multiple pages.
$paginator->hasMorePages()	Determine if there are more items in the data store.
$paginator->getCursorName()	Get the query string variable used to store the cursor.
$paginator->items()	Get the items for the current page.
$paginator->nextCursor()	Get the cursor instance for the next set of items.
$paginator->nextPageUrl()	Get the URL for the next page.
$paginator->onFirstPage()	Determine if the paginator is on the first page.
$paginator->onLastPage()	Determine if the paginator is on the last page.
$paginator->perPage()	The number of items to be shown per page.
$paginator->previousCursor()	Get the cursor instance for the previous set of items.
$paginator->previousPageUrl()	Get the URL for the previous page.
$paginator->setCursorName()	Set the query string variable used to store the cursor.
$paginator->url($cursor)	Get the URL for a given cursor instance.

