$user->roles()->attach($roleId);
$user->roles()->attach($roleId, ['expires' => $expires]); //expire will be in intermediate table


$user->roles()->detach($roleId);
$user->roles()->detach();	// Detach all roles from the user...
$user->roles()->detach([1, 2, 3]);
$user->roles()->attach([
    1 => ['expires' => $expires],
    2 => ['expires' => $expires],
]);






//Syncing Associations 	[during update]
$user->roles()->sync([1, 2, 3]);
$user->roles()->sync([1 => ['expires' => true], 2, 3]);
$user->roles()->syncWithPivotValues([1, 2, 3], ['active' => true]);  //will set active to all pivot models
$user->roles()->syncWithoutDetaching([1, 2, 3]);	//without detach existing IDs that are missing from the given array




//Toggling Associations
$user->roles()->toggle([1, 2, 3]);	//attach and detach





//Updating A Record On The Intermediate Table
$user->roles()->updateExistingPivot($roleId, [
    'active' => false,
]);







//it is sometimes helpful to update the parent's timestamp when the child model is updated.
protected $touches = ['post'];
use save method to update child to make this work.